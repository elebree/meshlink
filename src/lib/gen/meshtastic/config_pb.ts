// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file meshtastic/config.proto (package meshtastic, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file meshtastic/config.proto.
 */
export const file_meshtastic_config: GenFile = /*@__PURE__*/
  fileDesc("ChdtZXNodGFzdGljL2NvbmZpZy5wcm90bxIKbWVzaHRhc3RpYyLJCQoGQ29uZmlnGuEBCgxEZXZpY2VDb25maWci0AEKBFJvbGUSCgoGQ0xJRU5UEAASDwoLQ0xJRU5UX01VVEUQARIKCgZST1VURVIQAhIVCg1ST1VURVJfQ0xJRU5UEAMaAggBEgwKCFJFUEVBVEVSEAQSCwoHVFJBQ0tFUhAFEgoKBlNFTlNPUhAGEgcKA1RBSxAHEhEKDUNMSUVOVF9ISURERU4QCBISCg5MT1NUX0FORF9GT1VORBAJEg8KC1RBS19UUkFDS0VSEAoSDwoLUk9VVEVSX0xBVEUQCxIPCgtDTElFTlRfQkFTRRAMGtoHCgpMb1JhQ29uZmlnEhIKCnVzZV9wcmVzZXQYASABKAgSPwoMbW9kZW1fcHJlc2V0GAIgASgOMikubWVzaHRhc3RpYy5Db25maWcuTG9SYUNvbmZpZy5Nb2RlbVByZXNldBIRCgliYW5kd2lkdGgYAyABKA0SFQoNc3ByZWFkX2ZhY3RvchgEIAEoDRITCgtjb2RpbmdfcmF0ZRgFIAEoDRIYChBmcmVxdWVuY3lfb2Zmc2V0GAYgASgCEjgKBnJlZ2lvbhgHIAEoDjIoLm1lc2h0YXN0aWMuQ29uZmlnLkxvUmFDb25maWcuUmVnaW9uQ29kZRIRCglob3BfbGltaXQYCCABKA0SEgoKdHhfZW5hYmxlZBgJIAEoCBIQCgh0eF9wb3dlchgKIAEoBRITCgtjaGFubmVsX251bRgLIAEoDRIbChNvdmVycmlkZV9kdXR5X2N5Y2xlGAwgASgIEh4KFnN4MTI2eF9yeF9ib29zdGVkX2dhaW4YDSABKAgSGgoSb3ZlcnJpZGVfZnJlcXVlbmN5GA4gASgCEhcKD3BhX2Zhbl9kaXNhYmxlZBgPIAEoCBIXCg9pZ25vcmVfaW5jb21pbmcYZyADKA0SEwoLaWdub3JlX21xdHQYaCABKAgSGQoRY29uZmlnX29rX3RvX21xdHQYaSABKAgirgIKClJlZ2lvbkNvZGUSCQoFVU5TRVQQABIGCgJVUxABEgoKBkVVXzQzMxACEgoKBkVVXzg2OBADEgYKAkNOEAQSBgoCSlAQBRIHCgNBTloQBhIGCgJLUhAHEgYKAlRXEAgSBgoCUlUQCRIGCgJJThAKEgoKBk5aXzg2NRALEgYKAlRIEAwSCwoHTE9SQV8yNBANEgoKBlVBXzQzMxAOEgoKBlVBXzg2OBAPEgoKBk1ZXzQzMxAQEgoKBk1ZXzkxORAREgoKBlNHXzkyMxASEgoKBlBIXzQzMxATEgoKBlBIXzg2OBAUEgoKBlBIXzkxNRAVEgsKB0FOWl80MzMQFhIKCgZLWl80MzMQFxIKCgZLWl84NjMQGBIKCgZOUF84NjUQGRIKCgZCUl85MDIQGiKpAQoLTW9kZW1QcmVzZXQSDQoJTE9OR19GQVNUEAASDQoJTE9OR19TTE9XEAESFgoOVkVSWV9MT05HX1NMT1cQAhoCCAESDwoLTUVESVVNX1NMT1cQAxIPCgtNRURJVU1fRkFTVBAEEg4KClNIT1JUX1NMT1cQBRIOCgpTSE9SVF9GQVNUEAYSEQoNTE9OR19NT0RFUkFURRAHEg8KC1NIT1JUX1RVUkJPEAhCYQoTY29tLmdlZWtzdmlsbGUubWVzaEIMQ29uZmlnUHJvdG9zWiJnaXRodWIuY29tL21lc2h0YXN0aWMvZ28vZ2VuZXJhdGVkqgIUTWVzaHRhc3RpYy5Qcm90b2J1ZnO6AgBiBnByb3RvMw");

/**
 * @generated from message meshtastic.Config
 */
export type Config = Message<"meshtastic.Config"> & {
};

/**
 * Describes the message meshtastic.Config.
 * Use `create(ConfigSchema)` to create a new message.
 */
export const ConfigSchema: GenMessage<Config> = /*@__PURE__*/
  messageDesc(file_meshtastic_config, 0);

/**
 * @generated from message meshtastic.Config.DeviceConfig
 */
export type Config_DeviceConfig = Message<"meshtastic.Config.DeviceConfig"> & {
};

/**
 * Describes the message meshtastic.Config.DeviceConfig.
 * Use `create(Config_DeviceConfigSchema)` to create a new message.
 */
export const Config_DeviceConfigSchema: GenMessage<Config_DeviceConfig> = /*@__PURE__*/
  messageDesc(file_meshtastic_config, 0, 0);

/**
 *
 * Defines the device's role on the Mesh network
 *
 * @generated from enum meshtastic.Config.DeviceConfig.Role
 */
export enum Config_DeviceConfig_Role {
  /**
   *
   * Description: App connected or stand alone messaging device.
   * Technical Details: Default Role
   *
   * @generated from enum value: CLIENT = 0;
   */
  CLIENT = 0,

  /**
   *
   *  Description: Device that does not forward packets from other devices.
   *
   * @generated from enum value: CLIENT_MUTE = 1;
   */
  CLIENT_MUTE = 1,

  /**
   *
   * Description: Infrastructure node for extending network coverage by relaying messages. Visible in Nodes list.
   * Technical Details: Mesh packets will prefer to be routed over this node. This node will not be used by client apps.
   *   The wifi radio and the oled screen will be put to sleep.
   *   This mode may still potentially have higher power usage due to it's preference in message rebroadcasting on the mesh.
   *
   * @generated from enum value: ROUTER = 2;
   */
  ROUTER = 2,

  /**
   * @generated from enum value: ROUTER_CLIENT = 3 [deprecated = true];
   * @deprecated
   */
  ROUTER_CLIENT = 3,

  /**
   *
   * Description: Infrastructure node for extending network coverage by relaying messages with minimal overhead. Not visible in Nodes list.
   * Technical Details: Mesh packets will simply be rebroadcasted over this node. Nodes configured with this role will not originate NodeInfo, Position, Telemetry
   *   or any other packet type. They will simply rebroadcast any mesh packets on the same frequency, channel num, spread factor, and coding rate.
   *
   * @generated from enum value: REPEATER = 4;
   */
  REPEATER = 4,

  /**
   *
   * Description: Broadcasts GPS position packets as priority.
   * Technical Details: Position Mesh packets will be prioritized higher and sent more frequently by default.
   *   When used in conjunction with power.is_power_saving = true, nodes will wake up,
   *   send position, and then sleep for position.position_broadcast_secs seconds.
   *
   * @generated from enum value: TRACKER = 5;
   */
  TRACKER = 5,

  /**
   *
   * Description: Broadcasts telemetry packets as priority.
   * Technical Details: Telemetry Mesh packets will be prioritized higher and sent more frequently by default.
   *   When used in conjunction with power.is_power_saving = true, nodes will wake up,
   *   send environment telemetry, and then sleep for telemetry.environment_update_interval seconds.
   *
   * @generated from enum value: SENSOR = 6;
   */
  SENSOR = 6,

  /**
   *
   * Description: Optimized for ATAK system communication and reduces routine broadcasts.
   * Technical Details: Used for nodes dedicated for connection to an ATAK EUD.
   *    Turns off many of the routine broadcasts to favor CoT packet stream
   *    from the Meshtastic ATAK plugin -> IMeshService -> Node
   *
   * @generated from enum value: TAK = 7;
   */
  TAK = 7,

  /**
   *
   * Description: Device that only broadcasts as needed for stealth or power savings.
   * Technical Details: Used for nodes that "only speak when spoken to"
   *    Turns all of the routine broadcasts but allows for ad-hoc communication
   *    Still rebroadcasts, but with local only rebroadcast mode (known meshes only)
   *    Can be used for clandestine operation or to dramatically reduce airtime / power consumption
   *
   * @generated from enum value: CLIENT_HIDDEN = 8;
   */
  CLIENT_HIDDEN = 8,

  /**
   *
   * Description: Broadcasts location as message to default channel regularly for to assist with device recovery.
   * Technical Details: Used to automatically send a text message to the mesh
   *    with the current position of the device on a frequent interval:
   *    "I'm lost! Position: lat / long"
   *
   * @generated from enum value: LOST_AND_FOUND = 9;
   */
  LOST_AND_FOUND = 9,

  /**
   *
   * Description: Enables automatic TAK PLI broadcasts and reduces routine broadcasts.
   * Technical Details: Turns off many of the routine broadcasts to favor ATAK CoT packet stream
   *    and automatic TAK PLI (position location information) broadcasts.
   *    Uses position module configuration to determine TAK PLI broadcast interval.
   *
   * @generated from enum value: TAK_TRACKER = 10;
   */
  TAK_TRACKER = 10,

  /**
   *
   * Description: Will always rebroadcast packets, but will do so after all other modes.
   * Technical Details: Used for router nodes that are intended to provide additional coverage
   *    in areas not already covered by other routers, or to bridge around problematic terrain,
   *    but should not be given priority over other routers in order to avoid unnecessaraily
   *    consuming hops.
   *
   * @generated from enum value: ROUTER_LATE = 11;
   */
  ROUTER_LATE = 11,

  /**
   *
   * Description: Treats packets from or to favorited nodes as ROUTER, and all other packets as CLIENT.
   * Technical Details: Used for stronger attic/roof nodes to distribute messages more widely
   *    from weaker, indoor, or less-well-positioned nodes. Recommended for users with multiple nodes
   *    where one CLIENT_BASE acts as a more powerful base station, such as an attic/roof node.
   *
   * @generated from enum value: CLIENT_BASE = 12;
   */
  CLIENT_BASE = 12,
}

/**
 * Describes the enum meshtastic.Config.DeviceConfig.Role.
 */
export const Config_DeviceConfig_RoleSchema: GenEnum<Config_DeviceConfig_Role> = /*@__PURE__*/
  enumDesc(file_meshtastic_config, 0, 0, 0);

/**
 *
 * Lora Config
 *
 * @generated from message meshtastic.Config.LoRaConfig
 */
export type Config_LoRaConfig = Message<"meshtastic.Config.LoRaConfig"> & {
  /**
   *
   * When enabled, the `modem_preset` fields will be adhered to, else the `bandwidth`/`spread_factor`/`coding_rate`
   * will be taked from their respective manually defined fields
   *
   * @generated from field: bool use_preset = 1;
   */
  usePreset: boolean;

  /**
   *
   * Either modem_config or bandwidth/spreading/coding will be specified - NOT BOTH.
   * As a heuristic: If bandwidth is specified, do not use modem_config.
   * Because protobufs take ZERO space when the value is zero this works out nicely.
   * This value is replaced by bandwidth/spread_factor/coding_rate.
   * If you'd like to experiment with other options add them to MeshRadio.cpp in the device code.
   *
   * @generated from field: meshtastic.Config.LoRaConfig.ModemPreset modem_preset = 2;
   */
  modemPreset: Config_LoRaConfig_ModemPreset;

  /**
   *
   * Bandwidth in MHz
   * Certain bandwidth numbers are 'special' and will be converted to the
   * appropriate floating point value: 31 -> 31.25MHz
   *
   * @generated from field: uint32 bandwidth = 3;
   */
  bandwidth: number;

  /**
   *
   * A number from 7 to 12.
   * Indicates number of chirps per symbol as 1<<spread_factor.
   *
   * @generated from field: uint32 spread_factor = 4;
   */
  spreadFactor: number;

  /**
   *
   * The denominator of the coding rate.
   * ie for 4/5, the value is 5. 4/8 the value is 8.
   *
   * @generated from field: uint32 coding_rate = 5;
   */
  codingRate: number;

  /**
   *
   * This parameter is for advanced users with advanced test equipment, we do not recommend most users use it.
   * A frequency offset that is added to to the calculated band center frequency.
   * Used to correct for crystal calibration errors.
   *
   * @generated from field: float frequency_offset = 6;
   */
  frequencyOffset: number;

  /**
   *
   * The region code for the radio (US, CN, EU433, etc...)
   *
   * @generated from field: meshtastic.Config.LoRaConfig.RegionCode region = 7;
   */
  region: Config_LoRaConfig_RegionCode;

  /**
   *
   * Maximum number of hops. This can't be greater than 7.
   * Default of 3
   * Attempting to set a value > 7 results in the default
   *
   * @generated from field: uint32 hop_limit = 8;
   */
  hopLimit: number;

  /**
   *
   * Disable TX from the LoRa radio. Useful for hot-swapping antennas and other tests.
   * Defaults to false
   *
   * @generated from field: bool tx_enabled = 9;
   */
  txEnabled: boolean;

  /**
   *
   * If zero, then use default max legal continuous power (ie. something that won't
   * burn out the radio hardware)
   * In most cases you should use zero here.
   * Units are in dBm.
   *
   * @generated from field: int32 tx_power = 10;
   */
  txPower: number;

  /**
   *
   * This controls the actual hardware frequency the radio transmits on.
   * Most users should never need to be exposed to this field/concept.
   * A channel number between 1 and NUM_CHANNELS (whatever the max is in the current region).
   * If ZERO then the rule is "use the old channel name hash based
   * algorithm to derive the channel number")
   * If using the hash algorithm the channel number will be: hash(channel_name) %
   * NUM_CHANNELS (Where num channels depends on the regulatory region).
   *
   * @generated from field: uint32 channel_num = 11;
   */
  channelNum: number;

  /**
   *
   * If true, duty cycle limits will be exceeded and thus you're possibly not following
   * the local regulations if you're not a HAM.
   * Has no effect if the duty cycle of the used region is 100%.
   *
   * @generated from field: bool override_duty_cycle = 12;
   */
  overrideDutyCycle: boolean;

  /**
   *
   * If true, sets RX boosted gain mode on SX126X based radios
   *
   * @generated from field: bool sx126x_rx_boosted_gain = 13;
   */
  sx126xRxBoostedGain: boolean;

  /**
   *
   * This parameter is for advanced users and licensed HAM radio operators.
   * Ignore Channel Calculation and use this frequency instead. The frequency_offset
   * will still be applied. This will allow you to use out-of-band frequencies.
   * Please respect your local laws and regulations. If you are a HAM, make sure you
   * enable HAM mode and turn off encryption.
   *
   * @generated from field: float override_frequency = 14;
   */
  overrideFrequency: number;

  /**
   *
   * If true, disable the build-in PA FAN using pin define in RF95_FAN_EN.
   *
   * @generated from field: bool pa_fan_disabled = 15;
   */
  paFanDisabled: boolean;

  /**
   *
   * For testing it is useful sometimes to force a node to never listen to
   * particular other nodes (simulating radio out of range). All nodenums listed
   * in ignore_incoming will have packets they send dropped on receive (by router.cpp)
   *
   * @generated from field: repeated uint32 ignore_incoming = 103;
   */
  ignoreIncoming: number[];

  /**
   *
   * If true, the device will not process any packets received via LoRa that passed via MQTT anywhere on the path towards it.
   *
   * @generated from field: bool ignore_mqtt = 104;
   */
  ignoreMqtt: boolean;

  /**
   *
   * Sets the ok_to_mqtt bit on outgoing packets
   *
   * @generated from field: bool config_ok_to_mqtt = 105;
   */
  configOkToMqtt: boolean;
};

/**
 * Describes the message meshtastic.Config.LoRaConfig.
 * Use `create(Config_LoRaConfigSchema)` to create a new message.
 */
export const Config_LoRaConfigSchema: GenMessage<Config_LoRaConfig> = /*@__PURE__*/
  messageDesc(file_meshtastic_config, 0, 1);

/**
 * @generated from enum meshtastic.Config.LoRaConfig.RegionCode
 */
export enum Config_LoRaConfig_RegionCode {
  /**
   *
   * Region is not set
   *
   * @generated from enum value: UNSET = 0;
   */
  UNSET = 0,

  /**
   *
   * United States
   *
   * @generated from enum value: US = 1;
   */
  US = 1,

  /**
   *
   * European Union 433mhz
   *
   * @generated from enum value: EU_433 = 2;
   */
  EU_433 = 2,

  /**
   *
   * European Union 868mhz
   *
   * @generated from enum value: EU_868 = 3;
   */
  EU_868 = 3,

  /**
   *
   * China
   *
   * @generated from enum value: CN = 4;
   */
  CN = 4,

  /**
   *
   * Japan
   *
   * @generated from enum value: JP = 5;
   */
  JP = 5,

  /**
   *
   * Australia / New Zealand
   *
   * @generated from enum value: ANZ = 6;
   */
  ANZ = 6,

  /**
   *
   * Korea
   *
   * @generated from enum value: KR = 7;
   */
  KR = 7,

  /**
   *
   * Taiwan
   *
   * @generated from enum value: TW = 8;
   */
  TW = 8,

  /**
   *
   * Russia
   *
   * @generated from enum value: RU = 9;
   */
  RU = 9,

  /**
   *
   * India
   *
   * @generated from enum value: IN = 10;
   */
  IN = 10,

  /**
   *
   * New Zealand 865mhz
   *
   * @generated from enum value: NZ_865 = 11;
   */
  NZ_865 = 11,

  /**
   *
   * Thailand
   *
   * @generated from enum value: TH = 12;
   */
  TH = 12,

  /**
   *
   * WLAN Band
   *
   * @generated from enum value: LORA_24 = 13;
   */
  LORA_24 = 13,

  /**
   *
   * Ukraine 433mhz
   *
   * @generated from enum value: UA_433 = 14;
   */
  UA_433 = 14,

  /**
   *
   * Ukraine 868mhz
   *
   * @generated from enum value: UA_868 = 15;
   */
  UA_868 = 15,

  /**
   *
   * Malaysia 433mhz
   *
   * @generated from enum value: MY_433 = 16;
   */
  MY_433 = 16,

  /**
   *
   * Malaysia 919mhz
   *
   * @generated from enum value: MY_919 = 17;
   */
  MY_919 = 17,

  /**
   *
   * Singapore 923mhz
   *
   * @generated from enum value: SG_923 = 18;
   */
  SG_923 = 18,

  /**
   *
   * Philippines 433mhz
   *
   * @generated from enum value: PH_433 = 19;
   */
  PH_433 = 19,

  /**
   *
   * Philippines 868mhz
   *
   * @generated from enum value: PH_868 = 20;
   */
  PH_868 = 20,

  /**
   *
   * Philippines 915mhz
   *
   * @generated from enum value: PH_915 = 21;
   */
  PH_915 = 21,

  /**
   *
   * Australia / New Zealand 433MHz
   *
   * @generated from enum value: ANZ_433 = 22;
   */
  ANZ_433 = 22,

  /**
   *
   * Kazakhstan 433MHz
   *
   * @generated from enum value: KZ_433 = 23;
   */
  KZ_433 = 23,

  /**
   *
   * Kazakhstan 863MHz
   *
   * @generated from enum value: KZ_863 = 24;
   */
  KZ_863 = 24,

  /**
   *
   * Nepal 865MHz
   *
   * @generated from enum value: NP_865 = 25;
   */
  NP_865 = 25,

  /**
   *
   * Brazil 902MHz
   *
   * @generated from enum value: BR_902 = 26;
   */
  BR_902 = 26,
}

/**
 * Describes the enum meshtastic.Config.LoRaConfig.RegionCode.
 */
export const Config_LoRaConfig_RegionCodeSchema: GenEnum<Config_LoRaConfig_RegionCode> = /*@__PURE__*/
  enumDesc(file_meshtastic_config, 0, 1, 0);

/**
 *
 * Standard predefined channel settings
 * Note: these mappings must match ModemPreset Choice in the device code.
 *
 * @generated from enum meshtastic.Config.LoRaConfig.ModemPreset
 */
export enum Config_LoRaConfig_ModemPreset {
  /**
   *
   * Long Range - Fast
   *
   * @generated from enum value: LONG_FAST = 0;
   */
  LONG_FAST = 0,

  /**
   *
   * Long Range - Slow
   *
   * @generated from enum value: LONG_SLOW = 1;
   */
  LONG_SLOW = 1,

  /**
   *
   * Very Long Range - Slow
   * Deprecated in 2.5: Works only with txco and is unusably slow
   *
   * @generated from enum value: VERY_LONG_SLOW = 2 [deprecated = true];
   * @deprecated
   */
  VERY_LONG_SLOW = 2,

  /**
   *
   * Medium Range - Slow
   *
   * @generated from enum value: MEDIUM_SLOW = 3;
   */
  MEDIUM_SLOW = 3,

  /**
   *
   * Medium Range - Fast
   *
   * @generated from enum value: MEDIUM_FAST = 4;
   */
  MEDIUM_FAST = 4,

  /**
   *
   * Short Range - Slow
   *
   * @generated from enum value: SHORT_SLOW = 5;
   */
  SHORT_SLOW = 5,

  /**
   *
   * Short Range - Fast
   *
   * @generated from enum value: SHORT_FAST = 6;
   */
  SHORT_FAST = 6,

  /**
   *
   * Long Range - Moderately Fast
   *
   * @generated from enum value: LONG_MODERATE = 7;
   */
  LONG_MODERATE = 7,

  /**
   *
   * Short Range - Turbo
   * This is the fastest preset and the only one with 500kHz bandwidth.
   * It is not legal to use in all regions due to this wider bandwidth.
   *
   * @generated from enum value: SHORT_TURBO = 8;
   */
  SHORT_TURBO = 8,
}

/**
 * Describes the enum meshtastic.Config.LoRaConfig.ModemPreset.
 */
export const Config_LoRaConfig_ModemPresetSchema: GenEnum<Config_LoRaConfig_ModemPreset> = /*@__PURE__*/
  enumDesc(file_meshtastic_config, 0, 1, 1);

